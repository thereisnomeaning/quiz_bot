import json
from random import sample

import telebot
from telebot import types

from info import *

token = '6797511487:AAET4vGng_8X8bYIHDtocZN_vvQuKIMEnKw'

bot = telebot.TeleBot(token=token)

with open('data.json', 'r') as file:
    try:
        user_data = json.load(file)
    except:
        user_data = {}

@bot.message_handler(commands=['start', 'help'])
def start(message):
    user_id = str(message.from_user.id)
    if message.text == '/start':

        user_data[user_id] = {}
        # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ –∫–ª—é—á–µ–π –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ questions –∏–∑ –º–æ–¥—É–ª—è info
        random_questions = sample(list(questions.keys()), len(questions))

        user_data[user_id]['all_questions'] = random_questions # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        user_data[user_id]['unpopped_questions'] = random_questions.copy() # –æ—Ç—Å—é–¥–∞ –º—ã –±—É–¥–µ–º "–ø–æ–ø–∞—Ç—å" –ø–æ –æ–¥–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É
        user_data[user_id]['question_num'] = 0 # –∑–¥–µ—Å—å –º—ã –±—É–¥–µ–º —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞–∫–æ–º –≤–æ–ø—Ä–æ—Å–µ –º—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å
        user_data[user_id]['answers'] = {} # –∑–¥–µ—Å—å –º—ã –±—É–¥–µ–º –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –∏ –ø—Ä–∞–≤–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≤–æ–ø—Ä–æ—Å—É
        user_data[user_id]['current_question_key'] = None # –∑–¥–µ—Å—å –º—ã –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–ª—é—á –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ questions –∏–∑ info
        user_data[user_id]['finished'] = False # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏–ª–∏ –Ω–µ—Ç
        user_data[user_id]['preferred_language'] = 'rus_version' # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —è–∑—ã–∫
        user_data[user_id]['results'] = ['results', 'correct_answers'] # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã

        # –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ —É –Ω–∞—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        markup = markup_func_introduction('rus_version')
        bot.send_message(message.chat.id, msg_intr_rus_version, reply_markup=markup)

        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∫–æ–º–∞–Ω–¥—ã /start
        with open('data.json', 'w') as file:
            json.dump(user_data, file)
    else:

        # –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /help, —Ç—É—Ç –º—ã —É–∂–µ —Å–º–æ—Ç—Ä–∏–º –Ω–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–¥–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —ç—Ç–æ–º —è–∑—ã–∫–µ
        language = user_data[user_id]['preferred_language']
        markup = help_markup(language)
        text = markup_dict[language]['help_text']
        bot.send_message(chat_id=user_id, text=text, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    user_id = str(call.message.chat.id)

    # callback –¥–ª—è —Å–∞–º–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π/—Ä—É—Å—Å–∫–∏–π –¥–ª—è –∫–æ–º–∞–Ω–¥ /start /help
    if call.data in ['intr_eng_version', 'intr_rus_version', 'help_eng_version', 'help_rus_version']:

        # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –¥–ª—è markup_dict –∏–∑ info
        language = call.data[5:]

        if call.data.startswith('help'):
            text = markup_dict[language]['help_text']
            markup = help_markup(language)
        else:
            text = markup_dict[language]['intr_msg_language']
            markup = markup_func_introduction(language)

        # –ï—Å–ª–∏ –Ω–∞—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–µ–Ω–∏–ª —è–∑—ã–∫ –≤ –∫–æ–º–∞–Ω–¥–µ /start –∏–ª–∏ /help, —Ç–æ –Ω–∞—à —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –º–µ–Ω—è–µ—Ç—Å—è,
        # –≤—Å–µ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –∫–æ–º–∞–Ω–¥—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±—É–¥—É—Ç –Ω–∞ —è–∑—ã–∫–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—éü§î
        user_data[user_id]['preferred_language'] = language

        # –ó–¥–µ—Å—å –º—ã –º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ–Ω–æ –±—ã–ª–æ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
        bot.edit_message_text(chat_id=user_id, message_id=call.message.message_id,
                              text=text,
                              reply_markup=markup)

    # Callback –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π/—Ä—É—Å—Å–∫–∏–π —Å–∞–º–æ–≥–æ –∫–æ–Ω—Ü–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã(–∫–æ–≥–¥–∞ –≤—ã–≤–æ–¥–∏—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    elif call.data in ['finish_eng_version', 'finish_rus_version']:

        language = call.data[7:]
        markup = final_markup(language)

        # –î–æ–±–∞–≤–ª—è—é –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Å–ª—É—á–∞—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª —Ç–µ—Å—Ç –∏ –Ω–∞—á–∞–ª –Ω–æ–≤—ã–π,
        # user_data[user_id]['results'] –æ–±–Ω–æ–≤–ª—è—Ç—Å—è –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –∑–∞—Ö–æ—á–µ—Ç –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        # –Ω–∞ –¥—Ä—É–≥–æ–π —è–∑—ã–∫, —Ç–æ –≤—ã–¥–∞—Å—Ç –æ—à–∏–±–∫—É.
        try:
            scores = user_data[user_id]['results'][0]
            correct_results = user_data[user_id]['results'][1]
            bot.edit_message_text(chat_id=user_id, message_id=call.message.message_id,
                                  text=finish_text(language, scores, correct_results), reply_markup=markup)
        except:
            pass

    # Callback –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π/—Ä—É—Å—Å–∫–∏–π –ª–∏–±–æ –≤–æ–ø—Ä–æ—Å–∞ —Å–æ –≤—Å–µ–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞,
    # –ª–∏–±–æ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π/—Ä—É—Å—Å–∫–∏–π —É–∂–µ —Ä–µ—à–µ–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.
    elif call.data in ['rus_version', 'redo_rus_version', 'eng_version', 'redo_eng_version',]:

        # –≤–Ω–∏–∑—É –º—ã –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(–≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ)
        callback_question_num = int(call.message.text[:2]) # —Ç.–∫. —É –Ω–∞—Å –ø–µ—Ä–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ - —ç—Ç–æ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞
        # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ questions –∏–∑ –º–æ–¥—É–ª—è info
        card_key = user_data[user_id]['all_questions'][len(questions) - callback_question_num] # –ú—ã –∏–¥–µ–º –∑–∞–¥–æ–º –Ω–∞–ø–µ—Ä–µ–¥,
        # –ø–æ—Ç–æ–º—É —á—Ç–æ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ pop –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ user_data[user_id]['unpopped_questions'].

        # –ï—Å–ª–∏ –º—ã –ø–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç —É–∂–µ —Ä–µ—à–µ–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.
        if call.data in ['redo_rus_version', 'redo_eng_version']:

            language = call.data[5:]
            redo = True # —ç—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –º—ã –±—É–¥–µ–º –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –Ω–∞ –¥—Ä—É–≥–æ–π —è–∑—ã–∫ —É–∂–µ —Ä–µ—à–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –æ—Ç–≤–µ—Ç.
            chosen_option_index = user_data[user_id]['answers'][card_key][1]
            redo_answer = questions[card_key][language]['options'][chosen_option_index]

            # –ï—Å–ª–∏ –º—ã –¥–æ–±—Ä–∞–ª–∏—Å—å –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞, —Ç–æ –Ω–∞—à markup –±—É–¥–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç –æ–±—ã—á–Ω–æ–≥–æ
            if user_data[user_id]['question_num'] == len(questions):
                markup = markup_func_redo(language, final_question=True)
            else:
                markup = markup_func_redo(language)

        # –ï—Å–ª–∏ –º—ã –ø–µ—Ä–µ–≤–æ–¥–∏–º –æ–±—ã—á–Ω—ã–π –Ω–µ—Ä–µ—à–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å.
        else:
            redo = False
            redo_answer = False
            language = call.data

            # –ï—Å–ª–∏ –Ω–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ–¥–Ω–∏–π, —Ç–æ –Ω–∞—à markup –±—É–¥–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç –æ–±—ã—á–Ω–æ–≥–æ
            if user_data[user_id]['question_num'] == len(questions):
                markup = markup_func(call.data, final_question=True)
            else:
                markup = markup_func(call.data)

        # –≠—Ç–æ—Ç –±–ª–æ–∫ –Ω—É–∂–µ–Ω –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ñ–∏—á–∏: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–≤–µ–ª —Å–≤–æ–π —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–≥–æ–π —è–∑—ã–∫, —Ç–æ
        # –º—ã –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –µ–≥–æ –≤—ã–±–æ—Ä –∏ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±—É–¥—É—Ç –Ω–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–º –µ–º—É —è–∑—ã–∫–µ
        # –µ—Å–ª–∏ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–≤–µ–ª —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π –∏–º –≤–æ–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–≥–æ–π —è–∑—ã–∫, —Ç–æ —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è.
        if card_key == user_data[user_id]['current_question_key']:
            user_data[user_id]['preferred_language'] = language
        user_data[user_id]['language_of_question'] = language

        bot.edit_message_text(chat_id=user_id, message_id=call.message.message_id,
                              text=making_question(language, card_key, callback_question_num,
                                                   redo, redo_answer),
                              reply_markup=markup)

    # –ï—Å–ª–∏ –Ω–∞—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª —Ç–µ—Å—Ç, —Ç–æ –æ–Ω –Ω–µ —Å–º–æ–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–ª–µ–¥—É—é—â–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏.
    if not user_data[user_id]['finished']:

        # –ö–Ω–æ–ø–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.
        if call.data == 'next_question':
            if user_data[user_id]['unpopped_questions']: # –ï—Å–ª–∏ —É –Ω–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã.

                user_data[user_id]['question_num'] += 1
                user_data[user_id]['current_question_key'] = user_data[user_id]['unpopped_questions'].pop()
                current_question_key = user_data[user_id]['current_question_key']
                preferred_language = user_data[user_id]['preferred_language']

                if user_data[user_id]['question_num'] == len(questions):
                    markup = markup_func(preferred_language, final_question=True)
                else:
                    markup = markup_func(preferred_language)

                bot.send_message(chat_id=user_id,
                                 text=making_question(preferred_language, current_question_key,
                                                      user_data[user_id]['question_num']), reply_markup=markup)

        # –ö–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤.
        elif call.data in ['0','1','2','3']:

            callback_question_num = int(call.message.text[:2])
            card_key = user_data[user_id]['all_questions'][len(questions)-callback_question_num]
            # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
            current_language = 'eng_version' if 'c' in call.message.text[1:4] else 'rus_version'
            user_answer = int(call.data)
            correct_ans_idx = correct_answers_idxs[card_key]
            # —Ç–µ–∫—Å—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            redo_answer = questions[card_key][current_language]['options'][int(call.data)]

            if user_answer == correct_ans_idx:
                user_data[user_id]['answers'][card_key] = [1, user_answer]
            else:
                user_data[user_id]['answers'][card_key] = [0, user_answer]

            if callback_question_num == len(questions):
                markup = markup_func_redo(current_language, final_question=True)
            else:
                markup = markup_func_redo(current_language)

            bot.edit_message_text(chat_id=user_id, message_id=call.message.message_id,
                                  text=making_question(current_language, card_key, callback_question_num, redo=True,
                                                       redo_answer=redo_answer),
                                  reply_markup=markup)

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–∫–∞—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞(–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ—Ä–µ—à–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –≤—ã–±—Ä–∞–ª –æ—Ç–≤–µ—Ç).
        elif call.data in ['redo_callback_eng_version', 'redo_callback_rus_version']:

            callback_question_num = int(call.message.text[:2])
            card_key = user_data[user_id]['all_questions'][len(questions) - callback_question_num]
            language = call.data[14:]

            if callback_question_num == len(questions):
                markup = markup_func(language, final_question=True)
            else:
                markup = markup_func(language)

            bot.edit_message_text(chat_id=user_id, message_id=call.message.message_id,
                                  text=making_question(call.data[14:], card_key, callback_question_num),
                                  reply_markup=markup)

            # –ï—Å–ª–∏ –º—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –∫–Ω–æ–ø–∫—É "–†–µ—à–∏—Ç—å –∑–∞–Ω–æ–≤–æ" –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞, —Ç–æ –º—ã —É–¥–∞–ª—è–µ–º –ø—Ä–æ—à–ª—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            del user_data[user_id]['answers'][card_key]

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞
        elif call.data in ['finish_callback_rus_version', 'finish_callback_eng_version']:

            user_data[user_id]['finished'] = True
            language = call.data[16:]
            answers = user_data[user_id]['answers']
            scores = counting_results(answers)
            correct_results = correct_answers(user_data[user_id]['all_questions'], user_data[user_id]['answers'])
            user_data[user_id]['results'] = [scores, correct_results]

            markup = final_markup(language)
            bot.send_message(chat_id=user_id, text=finish_text(language, scores, correct_results), reply_markup=markup)

        with open('data.json', 'w') as file:
            json.dump(user_data, file)


bot.polling()